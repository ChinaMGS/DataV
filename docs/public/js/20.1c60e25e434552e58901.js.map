{"version":3,"file":"public/js/20.1c60e25e434552e58901.js","sources":["webpack:///src/views/pieChart/ringGraph.vue"],"sourcesContent":["<!-- 饼图 -->\r\n\r\n<template>\r\n  <div class=\"demo\">\r\n    <div class=\"box\">\r\n      <h3>基础环图</h3>\r\n      <div id=\"container\"></div>\r\n    </div>\r\n    <div class=\"box\">\r\n      <h3>环图统计指标卡</h3>\r\n      <div id=\"containerGs\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Pie, measureTextWidth } from '@antv/g2plot'\r\n\r\nexport default {\r\n  components: {},\r\n  data() {\r\n    return {\r\n      data: [\r\n        { type: '分类一', value: 27 },\r\n        { type: '分类二', value: 25 },\r\n        { type: '分类三', value: 18 },\r\n        { type: '分类四', value: 15 },\r\n        { type: '分类五', value: 10 },\r\n        { type: '其他', value: 5 }\r\n      ],\r\n      Texture: [\r\n        { type: '分类一', value: 27 },\r\n        { type: '分类二', value: 25 },\r\n        { type: '分类三', value: 18 },\r\n        { type: '分类四', value: 15 },\r\n        { type: '分类五', value: 10 },\r\n        { type: '其他', value: 5 }\r\n      ]\r\n    }\r\n  },\r\n  mounted() {\r\n    // 在 mounted 中构建，防止created 中无法获取标签元素\r\n    const data = this.data\r\n    const piePlot = new Pie('container', {\r\n      appendPadding: 10,\r\n      data,\r\n      angleField: 'value',\r\n      colorField: 'type',\r\n      radius: 1,\r\n      innerRadius: 0.6,\r\n      label: {\r\n        type: 'inner',\r\n        offset: '-50%',\r\n        content: '{value}',\r\n        style: {\r\n          textAlign: 'center',\r\n          fontSize: 14\r\n        }\r\n      },\r\n      interactions: [{ type: 'element-selected' }, { type: 'element-active' }],\r\n      statistic: {\r\n        title: false,\r\n        content: {\r\n          style: {\r\n            whiteSpace: 'pre-wrap',\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis'\r\n          },\r\n          formatter: () => 'AntV\\nG2Plot'\r\n        }\r\n      }\r\n    })\r\n\r\n    piePlot.render()\r\n\r\n    this.containerGs()\r\n  },\r\n  methods: {\r\n    containerGs() {\r\n      const data = this.Texture\r\n      const piePlot = new Pie('containerGs', {\r\n        appendPadding: 10,\r\n        data,\r\n        angleField: 'value',\r\n        colorField: 'type',\r\n        radius: 1,\r\n        innerRadius: 0.64,\r\n        meta: {\r\n          value: {\r\n            formatter: v => `${v} ¥`\r\n          }\r\n        },\r\n        label: {\r\n          type: 'inner',\r\n          offset: '-50%',\r\n          style: {\r\n            textAlign: 'center'\r\n          },\r\n          autoRotate: false,\r\n          content: '{value}'\r\n        },\r\n        statistic: {\r\n          title: {\r\n            offsetY: -4,\r\n            customHtml: (container, view, datum) => {\r\n              const { width, height } = container.getBoundingClientRect()\r\n              const d = Math.sqrt(Math.pow(width / 2, 2) + Math.pow(height / 2, 2))\r\n              const text = datum ? datum.type : '总计'\r\n              return this.renderStatistic(d, text, { fontSize: 28 })\r\n            }\r\n          },\r\n          content: {\r\n            offsetY: 4,\r\n            style: {\r\n              fontSize: '32px'\r\n            },\r\n            customHtml: (container, view, datum, data) => {\r\n              const { width } = container.getBoundingClientRect()\r\n\r\n              const text = datum ? `¥ ${datum.value}` : `¥ ${data.reduce((r, d) => r + d.value, 0)}`\r\n              return this.renderStatistic(width, text, { fontSize: 32 })\r\n            }\r\n          }\r\n        },\r\n        // 添加 中心统计文本 交互\r\n        interactions: [\r\n          { type: 'element-selected' },\r\n          { type: 'element-active' },\r\n          { type: 'pie-statistic-active' }\r\n        ]\r\n      })\r\n\r\n      piePlot.render()\r\n    },\r\n    renderStatistic(containerWidth, text, style) {\r\n      const { width: textWidth, height: textHeight } = measureTextWidth(text, style)\r\n      const R = containerWidth / 2\r\n      // r^2 = (w / 2)^2 + (h - offsetY)^2\r\n      let scale = 1\r\n      if (containerWidth < textWidth) {\r\n        scale = Math.min(\r\n          Math.sqrt(\r\n            Math.abs(Math.pow(R, 2) / (Math.pow(textWidth / 2, 2) + Math.pow(textHeight, 2)))\r\n          ),\r\n          1\r\n        )\r\n      }\r\n      const textStyleStr = `width:${containerWidth}px;`\r\n      return `<div style=\"${textStyleStr};font-size:${scale}em;color:balck;line-height:${\r\n        scale < 1 ? 1 : 'inherit'\r\n      };\">${text}</div>`\r\n    }\r\n  },\r\n  created() {\r\n    // var wrapperElement = '<div style=\"position:relative;\"></div>'\r\n    // console.log(document.getElementById('container'))\r\n    // document.getElementById('container').appendChild(wrapperElement)\r\n    // setTimeout(() => {\r\n    // }, 2000)\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"stylus\" scoped>\r\n.demo {\r\n  display: flex;\r\n  flex-flow: wrap;\r\n\r\n  .box {\r\n    box-shadow: 0px 2px 25px 0px rgba(133, 153, 181, 0.2);\r\n    border-radius: 10px;\r\n    display: inline-block;\r\n    padding: 0 20px 20px;\r\n    margin: 20px;\r\n\r\n    h3 {\r\n      line-height: 50px;\r\n      height: 50px;\r\n      text-align: center;\r\n    }\r\n  }\r\n\r\n  #container {\r\n    display: block;\r\n    width: 500px;\r\n    height: 300px;\r\n  }\r\n\r\n  #containerGs {\r\n    display: block;\r\n    width: 500px;\r\n    height: 300px;\r\n  }\r\n\r\n  #containerGz {\r\n    display: block;\r\n    width: 500px;\r\n    height: 300px;\r\n  }\r\n\r\n  #containerpt {\r\n    display: block;\r\n    width: 500px;\r\n    height: 300px;\r\n  }\r\n\r\n  #containerGet {\r\n    display: block;\r\n    width: 500px;\r\n    height: 300px;\r\n  }\r\n\r\n  #containerTexture {\r\n    display: block;\r\n    width: 500px;\r\n    height: 300px;\r\n  }\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/pieChart/ringGraph.vue"],"mappings":"AAkBA","sourceRoot":""}