{"version":3,"file":"public/js/33.1092a677625a002ec47d.js","sources":["webpack:///src/views/biaxialGraph/columnLineMixing.vue"],"sourcesContent":["<!-- 双折线图\r\n -->\r\n\r\n<template>\r\n  <div class=\"demo\">\r\n    <div class=\"box\">\r\n      <h3>柱线混合图表</h3>\r\n      <div id=\"container\"></div>\r\n    </div>\r\n    <div class=\"box\">\r\n      <h3>柱线混合图表-自定义样式</h3>\r\n      <div id=\"containerGs\"></div>\r\n    </div>\r\n    <div class=\"box\">\r\n      <h3>柱线混合图表-区间柱</h3>\r\n      <div id=\"containerGz\"></div>\r\n    </div>\r\n    <div class=\"box\">\r\n      <h3>柱线混合图表-显示多折线</h3>\r\n      <div id=\"containerpt\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { DualAxes } from '@antv/g2plot'\r\n\r\nexport default {\r\n  components: {},\r\n  data() {\r\n    return {\r\n      data: [\r\n        { time: '2020-08-20', consumeTime: 10868, completeTime: 649.483 },\r\n        { time: '2020-08-21', consumeTime: 8786, completeTime: 1053.7 },\r\n        { time: '2020-08-22', consumeTime: 10824, completeTime: 679.817 },\r\n        { time: '2020-08-23', consumeTime: 7860, completeTime: 638.117 },\r\n        { time: '2020-08-24', consumeTime: 13253, completeTime: 843.3 },\r\n        { time: '2020-08-25', consumeTime: 17015, completeTime: 1092.983 },\r\n        { time: '2020-08-26', consumeTime: 19298, completeTime: 1036.317 },\r\n        { time: '2020-08-27', consumeTime: 13937, completeTime: 1031.9 },\r\n        { time: '2020-08-28', consumeTime: 11541, completeTime: 803.467 },\r\n        { time: '2020-08-29', consumeTime: 15244, completeTime: 830.733 },\r\n        { time: '2020-08-30', consumeTime: 14247, completeTime: 709.867 },\r\n        { time: '2020-08-31', consumeTime: 9402, completeTime: 665.233 },\r\n        { time: '2020-09-01', consumeTime: 10440, completeTime: 696.367 },\r\n        { time: '2020-09-02', consumeTime: 9345, completeTime: 692.867 },\r\n        { time: '2020-09-03', consumeTime: 18459, completeTime: 936.017 },\r\n        { time: '2020-09-04', consumeTime: 9763, completeTime: 782.867 },\r\n        { time: '2020-09-05', consumeTime: 11074, completeTime: 653.8 },\r\n        { time: '2020-09-06', consumeTime: 11770, completeTime: 856.683 },\r\n        { time: '2020-09-07', consumeTime: 12206, completeTime: 777.15 },\r\n        { time: '2020-09-08', consumeTime: 11434, completeTime: 773.283 },\r\n        { time: '2020-09-09', consumeTime: 16218, completeTime: 833.3 },\r\n        { time: '2020-09-10', consumeTime: 11914, completeTime: 793.517 },\r\n        { time: '2020-09-11', consumeTime: 16781, completeTime: 894.45 },\r\n        { time: '2020-09-12', consumeTime: 10555, completeTime: 725.55 },\r\n        { time: '2020-09-13', consumeTime: 10899, completeTime: 709.967 },\r\n        { time: '2020-09-14', consumeTime: 10713, completeTime: 787.6 },\r\n        { time: '2020-09-15', consumeTime: 0, completeTime: 644.183 },\r\n        { time: '2020-09-16', consumeTime: 0, completeTime: 1066.65 },\r\n        { time: '2020-09-17', consumeTime: 20357, completeTime: 932.45 },\r\n        { time: '2020-09-18', consumeTime: 10424, completeTime: 753.583 }\r\n      ],\r\n      Datas: [\r\n        { time: '2019-03', value: 350, count: 800 },\r\n        { time: '2019-04', value: 900, count: 600 },\r\n        { time: '2019-05', value: 300, count: 400 },\r\n        { time: '2019-06', value: 450, count: 380 },\r\n        { time: '2019-07', value: 470, count: 220 }\r\n      ],\r\n      transformData: [\r\n        { time: '2019-03', value: [200, 350], count: 800 },\r\n        { time: '2019-04', value: [400, 650], count: 600 },\r\n        { time: '2019-05', value: [150, 350], count: 400 },\r\n        { time: '2019-06', value: [100, 450], count: 380 },\r\n        { time: '2019-07', value: [500, 550], count: 220 }\r\n      ],\r\n      uvData: [\r\n        { time: '2019-03', value: 35 },\r\n        { time: '2019-04', value: 90 },\r\n        { time: '2019-05', value: 30 },\r\n        { time: '2019-06', value: 45 },\r\n        { time: '2019-07', value: 47 }\r\n      ],\r\n\r\n      transformDat: [\r\n        { time: '2019-03', count: 800, name: 'a' },\r\n        { time: '2019-04', count: 600, name: 'a' },\r\n        { time: '2019-05', count: 400, name: 'a' },\r\n        { time: '2019-06', count: 380, name: 'a' },\r\n        { time: '2019-07', count: 220, name: 'a' },\r\n        { time: '2019-03', count: 750, name: 'b' },\r\n        { time: '2019-04', count: 650, name: 'b' },\r\n        { time: '2019-05', count: 450, name: 'b' },\r\n        { time: '2019-06', count: 400, name: 'b' },\r\n        { time: '2019-07', count: 320, name: 'b' },\r\n        { time: '2019-03', count: 900, name: 'c' },\r\n        { time: '2019-04', count: 600, name: 'c' },\r\n        { time: '2019-05', count: 450, name: 'c' },\r\n        { time: '2019-06', count: 300, name: 'c' },\r\n        { time: '2019-07', count: 200, name: 'c' }\r\n      ]\r\n    }\r\n  },\r\n  mounted() {\r\n    // 在 mounted 中构建，防止created 中无法获取标签元素\r\n    const data = this.data\r\n    const dualAxes = new DualAxes('container', {\r\n      data: [data, data],\r\n      xField: 'time',\r\n      yField: ['consumeTime', 'completeTime'],\r\n      meta: {\r\n        consumeTime: {\r\n          alias: '产出耗时',\r\n          formatter: v => {\r\n            return Number((v / 60).toFixed(2))\r\n          }\r\n        },\r\n        completeTime: {\r\n          alias: '完成时间',\r\n          formatter: v => {\r\n            return Number((v / 100).toFixed(1))\r\n          }\r\n        }\r\n      },\r\n      geometryOptions: [\r\n        {\r\n          geometry: 'column',\r\n          color: '#586bce'\r\n        },\r\n        {\r\n          geometry: 'line',\r\n          color: '#29cae4'\r\n        }\r\n      ],\r\n      xAxis: {\r\n        label: {\r\n          autoRotate: true,\r\n          autoHide: false,\r\n          autoEllipsis: false\r\n        },\r\n        tickCount: data.length / 2\r\n      },\r\n      yAxis: {\r\n        consumeTime: {\r\n          label: {\r\n            formatter: v => {\r\n              return `${v}分`\r\n            }\r\n          }\r\n        },\r\n        completeTime: {\r\n          label: {\r\n            formatter: v => {\r\n              return `${v}`\r\n            }\r\n          }\r\n        }\r\n      },\r\n      legend: {\r\n        itemName: {\r\n          formatter: (text, item) => {\r\n            return item.value === 'consumeTime' ? '产出耗时(分)' : '完成时间(分)'\r\n          }\r\n        }\r\n      },\r\n      annotations: {\r\n        consumeTime: [\r\n          {\r\n            type: 'line',\r\n            top: true,\r\n            start: ['2020-08-26', 'min'],\r\n            end: ['2020-08-26', 'max'],\r\n            text: {\r\n              content: '发布时间点',\r\n              position: 'end',\r\n              autoRotate: false,\r\n              style: {\r\n                textAlign: 'start'\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        completeTime: [\r\n          {\r\n            type: 'line',\r\n            top: true,\r\n            start: ['min', 1000],\r\n            end: ['max', 1000],\r\n            style: {\r\n              lineWidth: 1,\r\n              lineDash: [3, 3]\r\n            },\r\n            text: {\r\n              content: '完成时间阈值(1000s)',\r\n              position: 'end',\r\n              style: {\r\n                textAlign: 'end'\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    })\r\n\r\n    dualAxes.render()\r\n\r\n    this.containerGs()\r\n    this.containerGz()\r\n    this.containerpt()\r\n  },\r\n  methods: {\r\n    containerGs() {\r\n      const data = this.Datas\r\n      const dualAxes = new DualAxes('containerGs', {\r\n        data: [data, data],\r\n        xField: 'time',\r\n        yField: ['value', 'count'],\r\n        yAxis: {\r\n          // 格式化左坐标轴\r\n          value: {\r\n            min: 0,\r\n            label: {\r\n              formatter: val => `${val}个`\r\n            }\r\n          },\r\n          // 隐藏右坐标轴\r\n          count: false\r\n        },\r\n        geometryOptions: [\r\n          {\r\n            geometry: 'column',\r\n            color: '#5B8FF9',\r\n            columnWidthRatio: 0.4,\r\n            label: {\r\n              position: 'middle'\r\n            }\r\n          },\r\n          {\r\n            geometry: 'line',\r\n            smooth: true,\r\n            color: '#5AD8A6'\r\n          }\r\n        ],\r\n        // 更改柱线交互，默认为 [{type: 'active-region'}]\r\n        interactions: [\r\n          {\r\n            type: 'element-highlight'\r\n          },\r\n          {\r\n            type: 'active-region'\r\n          }\r\n        ],\r\n        annotations: {\r\n          value: [\r\n            {\r\n              type: 'text',\r\n              position: ['2019-06', 'max'],\r\n              content: '柱线混合图'\r\n            }\r\n          ],\r\n          count: [\r\n            {\r\n              type: 'dataMarker',\r\n              top: true,\r\n              position: ['2019-05', 400],\r\n              line: {\r\n                length: 20\r\n              },\r\n              text: {\r\n                content: '2019-05, 发布新版本',\r\n                style: {\r\n                  textAlign: 'left'\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      })\r\n\r\n      dualAxes.render()\r\n    },\r\n    containerGz() {\r\n      const data = this.transformData\r\n      const dualAxes = new DualAxes('containerGz', {\r\n        data: [data, data],\r\n        xField: 'time',\r\n        yField: ['value', 'count'],\r\n        geometryOptions: [\r\n          {\r\n            geometry: 'column',\r\n            color: '#5B8FF9',\r\n            isRange: true\r\n          },\r\n          {\r\n            geometry: 'line',\r\n            color: '#5AD8A6',\r\n            lineStyle: {\r\n              lineWidth: 2,\r\n              stroke: '#5AD8A6'\r\n            }\r\n          }\r\n        ]\r\n      })\r\n\r\n      dualAxes.render()\r\n    },\r\n    containerpt() {\r\n      const uvData = this.uvData\r\n      const transformDat = this.transformDat\r\n      const dualAxes = new DualAxes('containerpt', {\r\n        data: [uvData, transformDat],\r\n        xField: 'time',\r\n        yField: ['value', 'count'],\r\n        geometryOptions: [\r\n          {\r\n            geometry: 'column',\r\n            columnWidthRatio: 0.4\r\n          },\r\n          {\r\n            geometry: 'line',\r\n            seriesField: 'name'\r\n          }\r\n        ]\r\n      })\r\n\r\n      dualAxes.render()\r\n    }\r\n  },\r\n  created() {\r\n    // var wrapperElement = '<div style=\"position:relative;\"></div>'\r\n    // console.log(document.getElementById('container'))\r\n    // document.getElementById('container').appendChild(wrapperElement)\r\n    // setTimeout(() => {\r\n    // }, 2000)\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"stylus\" scoped>\r\n.demo {\r\n  display: flex;\r\n  flex-flow: wrap;\r\n\r\n  .box {\r\n    box-shadow: 0px 2px 25px 0px rgba(133, 153, 181, 0.2);\r\n    border-radius: 10px;\r\n    display: inline-block;\r\n    padding: 0 20px 20px;\r\n    margin: 20px;\r\n\r\n    h3 {\r\n      line-height: 50px;\r\n      height: 50px;\r\n      text-align: center;\r\n    }\r\n  }\r\n\r\n  #container {\r\n    display: block;\r\n    width: 500px;\r\n    height: 300px;\r\n  }\r\n\r\n  #containerGs {\r\n    display: block;\r\n    width: 500px;\r\n    height: 300px;\r\n  }\r\n\r\n  #containerGz {\r\n    display: block;\r\n    width: 500px;\r\n    height: 300px;\r\n  }\r\n\r\n  #containerpt {\r\n    display: block;\r\n    width: 500px;\r\n    height: 300px;\r\n  }\r\n\r\n  #containerGet {\r\n    display: block;\r\n    width: 500px;\r\n    height: 300px;\r\n  }\r\n\r\n  #containerTexture {\r\n    display: block;\r\n    width: 500px;\r\n    height: 300px;\r\n  }\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/biaxialGraph/columnLineMixing.vue"],"mappings":"AA2BA","sourceRoot":""}